{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\slimm\\\\Desktop\\\\Coding\\\\Projects\\\\Node_Nimita_Classes\\\\TSReactBlogV2.0\\\\tsblog_client\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from \"react\";\n\n// interface Subscriber {\n//     name: string\n//     email: string\n//     password: string\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthContextProvider = ({\n  children\n}) => {\n  _s();\n  const [admin, setAdmin] = useState(null);\n  useEffect(() => {});\n\n  //     const [subscriber, setSubscriber] = useState<null|'string'>(null);\n  //     const [registerError, setRegisterError] = useState(null);\n  //     const [isLoading, setIsLoading] = useState(false);\n\n  //     const [loginError, setLoginError] = useState(null);\n  //     const [isLoginLoading, setIsLoginLoading] = useState(false);\n  //     const [registerInfo, setRegisterInfo] = useState({\n  //         name: \"\",\n  //         email: \"\",\n  //         password: \"\",\n  //     });\n  //     const [loginInfo, setLoginInfo] = useState({\n  //         email: \"\",\n  //         password: \"\",\n  //     })\n\n  //     useEffect(() => {\n  //         const subscriber = localStorage.getItem(\"Subscriber\");\n  //         setSubscriber(JSON.parse(subscriber))\n  //     }, [])\n\n  //     const updateRegisterInfo = useCallback((info: any) => {\n  //         setRegisterInfo(info);\n  //     }, []);\n\n  //     const updateLoginInfo = useCallback((info: any) => {\n  //         setLoginInfo(info);\n  //     }, []);\n\n  //     const registerSubscriber = useCallback(async (e: any) => {\n  //         e.preventDefault();\n  //         setIsLoading(true);\n  //         setRegisterError(null);\n  //         try {\n  //         const response = await axios.post(`/subscribers/register`, registerInfo);\n  //         localStorage.setItem(\"Subscriber\", JSON.stringify(response.data));\n  //         setSubscriber(response.data);\n  //         }catch(error) {\n  //             setRegisterError((error as any).message)\n  //         }\n  //         setIsLoading(false);\n  //     }, [registerInfo]);\n\n  //     const loginSubscriber = useCallback(async (e: any) => {\n  //         e.preventDefault();\n  //         setIsLoginLoading(true);\n  //         setLoginError(null);\n  // try {\n  //      const response = await axios.post(`/subscribers/login`, loginInfo);\n\n  //         localStorage.setItem(\"Subscriber\", JSON.stringify(response.data));\n  //         setSubscriber(response.data);\n  // } catch (error) {\n  //     setLoginError((error as any).message)\n  // }\n  //        setIsLoginLoading(false);\n  //     }, [loginInfo])\n\n  //     const logoutSubscriber = useCallback(() => {\n  //         localStorage.removeItem(\"Subscriber\");\n  //         setSubscriber(null);\n  //     }, [])\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      admin,\n      setAdmin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthContextProvider, \"de2KzaIFJMVcIwYKTxrufBfsxJ8=\");\n_c = AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","jsxDEV","_jsxDEV","AuthContext","undefined","AuthContextProvider","children","_s","admin","setAdmin","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/slimm/Desktop/Coding/Projects/Node_Nimita_Classes/TSReactBlogV2.0/tsblog_client/src/context/AuthContext.tsx"],"sourcesContent":["import { createContext, useCallback, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// interface Subscriber {\r\n//     name: string\r\n//     email: string\r\n//     password: string\r\n// }\r\n\r\nexport interface AuthContextType {\r\n  admin: AdminType | null;\r\n  setAdmin: React.Dispatch<React.SetStateAction<AdminType | null>>;\r\n}\r\n\r\nexport const AuthContext = createContext<AuthContextType | undefined>(\r\n  undefined\r\n);\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\ninterface AdminType {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport const AuthContextProvider = ({ children }: Props) => {\r\n  const [admin, setAdmin] = useState<AdminType | null>(null);\r\n\r\n  useEffect(() => {\r\n    \r\n  })\r\n\r\n  //     const [subscriber, setSubscriber] = useState<null|'string'>(null);\r\n  //     const [registerError, setRegisterError] = useState(null);\r\n  //     const [isLoading, setIsLoading] = useState(false);\r\n\r\n  //     const [loginError, setLoginError] = useState(null);\r\n  //     const [isLoginLoading, setIsLoginLoading] = useState(false);\r\n  //     const [registerInfo, setRegisterInfo] = useState({\r\n  //         name: \"\",\r\n  //         email: \"\",\r\n  //         password: \"\",\r\n  //     });\r\n  //     const [loginInfo, setLoginInfo] = useState({\r\n  //         email: \"\",\r\n  //         password: \"\",\r\n  //     })\r\n\r\n  //     useEffect(() => {\r\n  //         const subscriber = localStorage.getItem(\"Subscriber\");\r\n  //         setSubscriber(JSON.parse(subscriber))\r\n  //     }, [])\r\n\r\n  //     const updateRegisterInfo = useCallback((info: any) => {\r\n  //         setRegisterInfo(info);\r\n  //     }, []);\r\n\r\n  //     const updateLoginInfo = useCallback((info: any) => {\r\n  //         setLoginInfo(info);\r\n  //     }, []);\r\n\r\n  //     const registerSubscriber = useCallback(async (e: any) => {\r\n  //         e.preventDefault();\r\n  //         setIsLoading(true);\r\n  //         setRegisterError(null);\r\n  //         try {\r\n  //         const response = await axios.post(`/subscribers/register`, registerInfo);\r\n  //         localStorage.setItem(\"Subscriber\", JSON.stringify(response.data));\r\n  //         setSubscriber(response.data);\r\n  //         }catch(error) {\r\n  //             setRegisterError((error as any).message)\r\n  //         }\r\n  //         setIsLoading(false);\r\n  //     }, [registerInfo]);\r\n\r\n  //     const loginSubscriber = useCallback(async (e: any) => {\r\n  //         e.preventDefault();\r\n  //         setIsLoginLoading(true);\r\n  //         setLoginError(null);\r\n  // try {\r\n  //      const response = await axios.post(`/subscribers/login`, loginInfo);\r\n\r\n  //         localStorage.setItem(\"Subscriber\", JSON.stringify(response.data));\r\n  //         setSubscriber(response.data);\r\n  // } catch (error) {\r\n  //     setLoginError((error as any).message)\r\n  // }\r\n  //        setIsLoginLoading(false);\r\n  //     }, [loginInfo])\r\n\r\n  //     const logoutSubscriber = useCallback(() => {\r\n  //         localStorage.removeItem(\"Subscriber\");\r\n  //         setSubscriber(null);\r\n  //     }, [])\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        admin,\r\n        setAdmin,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,aAAa,EAAeC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAGvE;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOA,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CACtCM,SACF,CAAC;AAWD,OAAO,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAmB,IAAI,CAAC;EAE1DD,SAAS,CAAC,MAAM,CAEhB,CAAC,CAAC;;EAEF;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,oBACEG,OAAA,CAACC,WAAW,CAACO,QAAQ;IACnBC,KAAK,EAAE;MACLH,KAAK;MACLC;IACF,CAAE;IAAAH,QAAA,EAEDA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACR,EAAA,CAhFWF,mBAAmB;AAAAW,EAAA,GAAnBX,mBAAmB;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}